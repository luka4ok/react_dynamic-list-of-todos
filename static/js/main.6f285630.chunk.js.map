{"version":3,"sources":["types/SelectOptions.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SelectOptions","TodoList","todos","onTodoSelect","selectedTodo","className","map","todo","isTodoSelected","id","cn","completed","title","type","onClick","handleTodoSelect","TodoFilter","query","setQuery","setSelect","onChange","e","target","value","Object","values","key","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","setSelectedTodo","userId","useState","user","setUser","isLoading","setIsLoading","useEffect","getUser","catch","Error","finally","href","email","name","App","setTodos","loading","setLoading","All","shownTodos","setShownTodos","filteredTodos","useMemo","copiedTodos","filter","toLowerCase","includes","Active","Completed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f285630.chunk.js","sourcesContent":["export enum SelectOptions {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onTodoSelect: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onTodoSelect,\n  selectedTodo,\n}) => {\n  function handleTodoSelect(todo: Todo) {\n    onTodoSelect(todo);\n  }\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map((todo) => {\n          const isTodoSelected = selectedTodo?.id === todo.id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn({ 'has-background-info-light': isTodoSelected })}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={cn('has-text-success', {\n                    'has-text-danger': !todo.completed,\n                  })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleTodoSelect(todo)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={`${\n                        isTodoSelected ? 'far fa-eye-slash' : 'far fa-eye'\n                      }`}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { SelectOptions } from '../../types/SelectOptions';\n\ntype Props = {\n  query: string;\n  setQuery: (text: string) => void;\n  setSelect: (option: SelectOptions) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({ query, setQuery, setSelect }) => {\n  function handleSelectChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    setSelect(e.target.value as SelectOptions);\n  }\n\n  function handleQueryChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setQuery(e.target.value);\n  }\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleSelectChange}>\n            {Object.values(SelectOptions).map((key) => (\n              <option value={key} key={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo;\n  setSelectedTodo: (todo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo: todo,\n  setSelectedTodo,\n}) => {\n  const {\n    id,\n    title,\n    userId,\n    completed,\n  } = todo;\n\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(userId)\n      .then(setUser)\n      .catch(() => {\n        throw new Error('No users');\n      })\n      .finally(() => setIsLoading(false));\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      {!isLoading && user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { SelectOptions } from './types/SelectOptions';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const [loading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [shownTodos, setShownTodos] = useState<SelectOptions>(SelectOptions.All);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setLoading(false));\n  }, []);\n\n  const filteredTodos: Todo[] = useMemo(() => {\n    let copiedTodos = [...todos];\n\n    if (query) {\n      copiedTodos = copiedTodos.filter(\n        (todo) => todo.title.toLowerCase().includes(query.toLowerCase()),\n      );\n    }\n\n    switch (shownTodos) {\n      case SelectOptions.Active:\n        return copiedTodos.filter(todo => !todo.completed);\n      case SelectOptions.Completed:\n        return copiedTodos.filter(todo => todo.completed);\n      default:\n        return copiedTodos;\n    }\n  }, [query, todos, shownTodos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                setSelect={setShownTodos}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && <Loader />}\n              <TodoList\n                todos={filteredTodos}\n                onTodoSelect={setSelectedTodo}\n                selectedTodo={selectedTodo}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal selectedTodo={selectedTodo} setSelectedTodo={setSelectedTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}